# Cirrus CI configuration file using the matrix feature
# Read more under https://cirrus-ci.org/guide/writing-tasks/
# THIS FILE IS SUPPOSED TO BE AN EXAMPLE. MODIFY IT ACCORDING TO YOUR NEEDS!

---
# ---- Default values to be merged into tasks ----
auto_cancellation: false
env:
  LC_ALL: C.UTF-8
  LANG: C.UTF-8
  PIP_CACHE_DIR: ${CIRRUS_WORKING_DIR}/.cache/pip
  PRE_COMMIT_HOME: ${CIRRUS_WORKING_DIR}/.cache/pre-commit
  # Coveralls configuration
  CI_NAME: cirrus-ci
  CI_BRANCH: ${CIRRUS_BRANCH}
  CI_PULL_REQUEST: ${CIRRUS_PR}
  CI_BUILD_NUMBER: ${CIRRUS_BUILD_ID}
  CI_BUILD_URL: https://cirrus-ci.com/build/${CIRRUS_BUILD_ID}

# ---- Templates ----

.task_template: &task-template
  install_tools_script:
    # Help debugging
    - which python
    - python --version
    - python -c 'import site; print(site.PREFIXES)'
    - python -m site --user-base --user-site
    # Actual tool installation
    - pip install --upgrade pip tox coverage coveralls pre-commit
  prepare_script:
    - git config --global user.email "you@example.com"
    - git config --global user.name "Your Name"
  # pip_cache: {folder: "${CIRRUS_WORKING_DIR}/.cache/pip"}
  # pre_commit_cache: {folder: "${CIRRUS_WORKING_DIR}/.cache/pre-commit"}

.test_task_template: &test-template
  alias: test
  depends_on: [build]
  env: &test-env-template
    COVERALLS_PARALLEL: "true"
    COVERALLS_FLAG_NAME: ${CIRRUS_TASK_NAME}
  dist_cache:
    folder: "dist"
    fingerprint_key: "dist"
    reupload_on_changes: false
  test_script:
    - tox --installpkg dist/*.whl -- -rfEx --durations 10 --color yes
  submit_coverage_script:
    - coverage xml -o coverage.xml
    - coveralls --submit coverage.xml

# Deep clone script for POSIX environments (required for setuptools-scm)
.clone_script: &clone |
  if [ -z "$CIRRUS_PR" ]; then
    git clone --recursive --branch=$CIRRUS_BRANCH https://x-access-token:${CIRRUS_REPO_CLONE_TOKEN}@github.com/${CIRRUS_REPO_FULL_NAME}.git $CIRRUS_WORKING_DIR
    git reset --hard $CIRRUS_CHANGE_IN_REPO
  else
    git clone --recursive https://x-access-token:${CIRRUS_REPO_CLONE_TOKEN}@github.com/${CIRRUS_REPO_FULL_NAME}.git $CIRRUS_WORKING_DIR
    git fetch origin pull/$CIRRUS_PR/head:pull/$CIRRUS_PR
    git reset --hard $CIRRUS_CHANGE_IN_REPO
  fi

# ---- CI Pipeline ----

check_task:
  name: check (Linux - 3.10)
  alias: check
  container: {image: "python:3.10-bullseye"}  # most recent => better type support
  <<: *task-template
  check_script:
    - pre-commit run --all-files --show-diff-on-failure
    # - tox -e typecheck

build_task:
  name: build (Linux - 3.10)
  alias: build
  container: {image: "python:3.10-bullseye"}
  clone_script: *clone
  <<: *task-template
  build_script: tox -e clean,build
  dist_cache: {folder: "dist", fingerprint_key: "dist"}  # Upload distribution to be shared with other tasks

test_task:
  matrix:
    - name: test (Linux - 3.6)
      container: {image: "python:3.6-bullseye"}
      allow_failures: true  # EoL
    - name: test (Linux - 3.7)
      container: {image: "python:3.7-bullseye"}
    - name: test (Linux - 3.8)
      container: {image: "python:3.8-bullseye"}
    - name: test (Linux - 3.9)
      container: {image: "python:3.9-bullseye"}
    - name: test (Linux - 3.10)
      container: {image: "python:3.10-bullseye"}
    - name: test (Linux - 3.11)
      container: {image: "python:3.11-rc-bullseye"}
      allow_failures: true  # Experimental
  <<: *task-template
  <<: *test-template

mamba_task:
  name: test (Linux - mamba)
  container: {image: "condaforge/mambaforge"}
  env: {USING_CONDA: true}
  <<: *task-template
  conda_install_script: # Overwrite template
    - mamba install -y pip tox coverage coveralls pre-commit
  <<: *test-template

macos_task:
  name: test (OS X - 3.9)
  macos_instance: {image: "big-sur-xcode"}
  brew_cache: {folder: "$HOME/Library/Caches/Homebrew"}
  install_script: brew install python
  <<: *task-template
  <<: *test-template
  env:
    PYTHON_VERSION: 3.9
    PATH: "${HOME}/.local/bin:${HOME}/Library/Python/${PYTHON_VERSION}/bin:/usr/local/opt/python/libexec/bin:${PATH}"
    <<: *test-env-template

windows_task:
  name: test (Windows - 3.9.10)
  windows_container:
    image: "cirrusci/windowsservercore:2019"
    os_version: 2019
  windows_install_script:
    # Activate long file paths to avoid some errors
    - ps: New-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" -Name "LongPathsEnabled" -Value 1 -PropertyType DWORD -Force
    # - reg ADD 'HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\FileSystem' /v LongPathsEnabled /t REG_DWORD /d 1 /f
    # Set Windows encoding to UTF-8
    - ps: New-ItemProperty -Path "HKCU:\Software\Microsoft\Command Processor" -Name "Autorun" -Value "@chcp 65001>nul" -PropertyType SZ -Force
    # - reg ADD 'HKEY_CURRENT_USER\Software\Microsoft\Command Processor' /v Autorun /t REG_SZ /d "@chcp 65001>nul" /f
    - choco install -y --no-progress python --version=3.9.10
    - pip install --upgrade certifi
  <<: *task-template
  <<: *test-template
  env:
    CIRRUS_SHELL: bash
    PATH: ${PATH}:/c/Python39:/c/Python39/Scripts
    <<: *test-env-template

finalize_task:
  container: {image: "python:3.10-bullseye"}
  depends_on: [test]
  <<: *task-template
  finalize_coverage_script: coveralls --finish

linkcheck_task:
  name: linkcheck (Linux - 3.10)
  container: {image: "python:3.10-bullseye"}
  depends_on: [finalize]
  allow_failures: true
  <<: *task-template
  linkcheck_script: tox -e linkcheck -- -q

publish_task:
  name: publish (Linux - 3.10)
  container: {image: "python:3.10-bullseye"}
  depends_on: [check, build, test]
  only_if: $CIRRUS_TAG =~ 'v\d.*' && $CIRRUS_USER_PERMISSION == "admin"
  <<: *task-template
  dist_cache: {folder: "dist", fingerprint_key: "dist"}
  env:
    TWINE_REPOSITORY: pypi
    TWINE_USERNAME: __token__
    TWINE_PASSWORD: $PYPI_TOKEN  # https://cirrus-ci.org/guide/writing-tasks/#encrypted-variables
  publish_script:
    - ls dist/*
    - tox -e publish
